using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

#nullable enable

namespace GDMENUCardManager.Core
{
    public class ExportFileManager
    {
        private string backingFilePath;

        public ExportFileManager(string filePath)
        {
            backingFilePath = filePath;
        }

        public async Task WriteItems(IEnumerable<GdItem> items)
        {
            await using var writer = File.Create(backingFilePath);
            if (writer == null)
                return;

            var exportFile = new ExportFile_v1(items);
            await JsonSerializer.SerializeAsync(writer, exportFile);
        }

        public async Task<ExportFile_v1?> ReadItems()
        {
            await using var reader = File.OpenRead(backingFilePath);
            if (reader == null)
                return null;
            return await JsonSerializer.DeserializeAsync<ExportFile_v1>(reader);
        }
    }

    public class ExportFile_v1
    {
        public static readonly int k_Version = 1;

        [JsonInclude]
        public readonly int Version = k_Version;

        [JsonInclude]
        public string Info = "Generated by GDMENUCardManager";

        [JsonInclude]
        public List<ExportItem> ItemList = new List<ExportItem>();

        public IEnumerable<GdItem> ToGdItemList() => ItemList.Select(x => (GdItem)x);

        public ExportFile_v1() { }

        public ExportFile_v1(IEnumerable<GdItem> itemList)
        {
            foreach (var item in itemList)
            {
                ItemList.Add(new ExportItem(item));
            }
        }
    }

    public struct ExportItem
    {
        [JsonInclude]
        public string Name;

        [JsonInclude]
        public string Location;

        [JsonInclude]
        public string FullFolderPath;

        [JsonInclude]
        public IEnumerable<string> ImageFiles;

        [JsonInclude]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string? ErrorState;

        [JsonConstructor]
        public ExportItem(
            string name,
            string location,
            string fullFolderPath,
            IEnumerable<string> imageFiles,
            string? errorState
        )
        {
            Name = string.IsNullOrEmpty(name)
                ? throw new InvalidDataException("'Name' cannot be empty")
                : name;
            Location = string.IsNullOrEmpty(location)
                ? Enum.GetName(LocationEnum.Unset)!
                : location;
            FullFolderPath = string.IsNullOrEmpty(fullFolderPath)
                ? throw new InvalidDataException("'FullItemPath' cannot be empty")
                : fullFolderPath;

            if (imageFiles.Count() == 0)
            {
                throw new InvalidDataException("'ImageFiles' cannot be empty");
            }
            ImageFiles = imageFiles;

            ErrorState = errorState;
        }

        public ExportItem(GdItem item)
        {
            Name = item.Name;
            Location = Enum.GetName(item.Location) ?? Enum.GetName(LocationEnum.Unset)!;
            FullFolderPath = item.FullFolderPath;
            ImageFiles = item.ImageFiles;
            ErrorState = string.IsNullOrEmpty(item.ErrorState) ? null : item.ErrorState;
        }

        public static explicit operator GdItem(ExportItem exportItem)
        {
            if (
                !Enum.TryParse<LocationEnum>(
                    exportItem.Location,
                    ignoreCase: true,
                    result: out var location
                )
            )
            {
                location = LocationEnum.Unset;
            }

            var gdItem = new GdItem
            {
                Name = exportItem.Name,
                Location = location,
                FullFolderPath = exportItem.FullFolderPath
            };
            gdItem.ImageFiles.AddRange(exportItem.ImageFiles);
            return gdItem;
        }
    }
}

#nullable restore
